#include <stdio.h> 
#include <stdlib.h> 
struct Node { 
 int data; 
 struct Node *left, *right; 
}; 
struct Node* newNode(int value) { 
 struct Node* temp = (struct Node*)malloc(sizeof(struct Node));  temp->data = value; 
 temp->left = temp->right = NULL; 
 return temp; 
} 
struct Node* insert(struct Node* root, int value) { 
 if (root == NULL) { 
 return newNode(value); 
 }
 if (value < root->data) 
 root->left = insert(root->left, value); 
 else if (value > root->data) 
 root->right = insert(root->right, value);  return root; 
} 
struct Node* findMin(struct Node* root) {  while (root && root->left != NULL) 
 root = root->left; 
 return root; 
} 
struct Node* deleteNode(struct Node* root, int key) {  if (root == NULL) return root; 
 if (key < root->data) 
 root->left = deleteNode(root->left, key);  else if (key > root->data) 
 root->right = deleteNode(root->right, key);  else { 
 if (root->left == NULL) { 
 struct Node* temp = root->right; 
 free(root); 
 return temp; 
 }
 else if (root->right == NULL) { 
 struct Node* temp = root->left; 
 free(root); 
 return temp; 
 } 
 struct Node* temp = findMin(root->right); 
 root->data = temp->data; 
 root->right = deleteNode(root->right, temp->data);  } 
 return root; 
} 
void inorder(struct Node* root) { 
 if (root != NULL) { 
 inorder(root->left); 
 printf("%d ", root->data); 
 inorder(root->right); 
 } 
} 
int main() { 
 struct Node* root = NULL; 
 int choice, value; 
 do { 
 printf("\n--- Binary Search Tree Operations (Recursive) ---\n");
 printf("1. Insert a node\n"); 
 printf("2. Delete a node\n"); 
 printf("3. Inorder Traversal\n"); 
 printf("4. Exit\n"); 
 printf("Enter your choice: "); 
 scanf("%d", &choice); 
 switch (choice) { 
 case 1: 
 printf("Enter value to insert: "); 
 scanf("%d", &value); 
 root = insert(root, value); 
 printf("Node inserted successfully.\n");  break; 
 case 2: 
 printf("Enter value to delete: "); 
 scanf("%d", &value); 
 root = deleteNode(root, value); 
 printf("Node deleted successfully (if present).\n");  break; 
 case 3: 
 printf("Inorder Traversal: ");
 inorder(root); 
 printf("\n"); 
 break; 
 case 4: 
 printf("Exiting program.\n"); 
 break; 
 default: 
 printf("Invalid choice! Try again.\n"); 
 } 
 } while (choice != 4); 
 return 0; 
} 
